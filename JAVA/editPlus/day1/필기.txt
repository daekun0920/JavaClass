* 프린트후 코멘트(주석) 부분 형광펜으로 하이라이트 표시해주기
커리큘럼

1. 애플리케이션 구현
2. 네트워크 소프트웨어
3. 요구사항 
4. 데이터베이스
5. sql
6. 개발자 테스트
7. 정보 시스템 이행
8. 제품 소프트웨어 패키징


1. 자바, Java
2. 데이터베이스, Oracle
3. 1 + 2 = JDBC
========================== 콘솔 기반
4. HTML, CSS, Javascript // Client-Side
5. Servlet, JSP // Server-side
========================== 웹 사이트
6. Spring, MyBatis // 5번 버전업
    -> 정부, 전자 정부 표준 프레임워크
7. XML, jQuery, Ajax, Open API...





개발 환경
1. 편집 툴, 개발 도구
    A. Editplus, 메모장
        - 텍스트 편집기
    B. 생산성이 높은 개발 도구
    	- IDE, 통합 개발 환경
	- Eclipse, NetBeans, InteliJ
    C. SublimeText, Atom, Visual Studio Code...


2. 개발(실행) 환경
    a. Java + Windows
    b. 개발 환경 -> JDK 설치
        Java SE Development Kit 8u151

	JDK 8       <- 똑같음
	JDK 1.8     <-   

    c. 실행 환경 -> JRE 설치
    d. 자바 : http://oracle.com (http://sun.com)


운영체제(OS)
-Win + Pause              JDK(JRE)            나중에 추가(Eclipse)
1. 32bit                  32bit                 32bit
                      
2. 64bit                  32bit                 32bit
                          64bit                 64bit


콘솔 명령어

1. dir, dir/w
    -현재 디렉토리 목록 보기

2. 자식폴더 이동 / 부모 폴더 이동
    a. 부모 폴더 이동
	- cd ..
    b. 자식 폴더 이동
    	- cd 자식폴더명
    공백에서 Shift + 우클릭 = 현재 위치에서 프롬프트 실행

3. Path 설정
    - 윈도우 설정 > Path 환경 변수 > 특정 폴더의 경로를 등록 > 어느 위치에 있던 Path 경로에 속하는 폴더를 바로 인식
    - Win + Pause > 고급 시스템 설정> 환경 변수 > Path 편집 > 해당 파일 경로 추가 

/*

Multi Line Comment
다중 행 주석
필기는 주석으로

*/



// 예약어, Reserved Word
//class, public, static, void = 예약어 (각각 어떠한 일을 할 것이다.)

// Ex01이란 이름의 클래스를 선언한다. (코드 읽는 연습을 많이해야함.)
// 클래스: 코드의 집합
// 메소드: 코드의 집합

/*

자바 콘솔 프로그램 작성

1. 프로그램 소수 작성
    - Java 언어 사용
	- *.java 저장
	- 클래스명과 파일명이 반드시 동일
	- 사용된 언어가 사람이 사용하는 언어 (사람이 사용하는 언어를 기계어(바이너리 코드)로 변환해주는것이 컴파일)

2. 컴파일, Compile
    - 소스 파일 -> 번역 -> 기계어
	- 컴파일러, Compiler // 프로그램
	- javac.exe // 자바 컴파일러
	- javac.exe 소스파일
	- 결과물 : 번역된 결과 -> *.class 파일(클래스 파일, 실행 파일, 바이너리 파일)

3. 실행, Run
	- *.java > javac.exe > *.class = 중간언어 > java.exe 와 JRE를 거쳐 해당 OS에 맞는 기계어로 2차 번역된다. 
	- *.java = 재료, *.class = 손질된 재료, 후 java.exe 와 JRE(셰프)를 거쳐 각 손님(OS) 취향에 맞게 조리
	
	- 2차 컴파일, 인터프리터
	- java.exe
	- 결과물 X - > 기계어
	- 컴파일 = 결과물 있음, 인터프리터 = 결과물 X 
	- 컴파일 = 초기 비용 많이듬 > 시간이 오래걸림, 인터프리터 = 그때그때 조금씩 동시통역, 심플하며 초기에 시간이 적게 걸림
	- JIT 컴파일러(Just In Time) = 컴파일도 아니고 인터프리터도 아닌 그 중간의 것(하이브리드)

*/

/*

식별자 규칙
- 폴더, 파일, 클래스명, 메소드명, 변수명 등등...
1. 영문자 + 숫자 + 특수문자중 "_" 만 (한글 x)
2. 숫자로 시작 x -> _2017
3. 의미있게(******) -> 약어 사용 x

소스 편집 -> 공백 사용 -> 자바 컴파일러는 (종류에 상관없이) 연속된 공백을 무시한다.
1. space
2. 엔터
3. 탭


코딩 컨벤션 = 코딩 스타일 규칙들

대소문자 철저하게 구분한다.
문법 엄격 -> 컴파일 방식

*/

	/*
		http://terms.co.kr

		~(tild)
		!, @, #, $, %, ^, &, *, -, +, |
		', "

		() 
		{}
		[]
		<> 화살표 괄호
		*/



//Ex04_Variable.java

		//변수, Variable
		// - 자료형을 사용해서 메모리에 얻은 공간
		// - 값(데이터)을 저장하는 공간(용도)
		
		//1. 변수 선언(생성)
		//	 -자료형 변수명;
		byte kor;

		//2. 변수 초기화
		//	 - 변수 = 값; // 대입 연산자
		kor = 100;

		//3. 변수 사용(호출, 접근 ..)
		System.out.println(kor);

		//4. 변수 치환
		kor = 95;
		// 변수 하나에는 데이터 하나만
		
		//byte(-128~127)중 양을 나타내는것이 아니라 경우의수중 하나임
		// 변수 vs 상수
		// - 변수 사용? 상수 사용?

		// 내 몸무게 출력
		//1. 상수
		System.out.println(70);
		//2. 변수 (무엇인지 유추하기위해 상수보단 변수 사용 = 데이터에 의미 부여가능)
		byte weight;
		weight = 70;
		System.out.println(weight);

		System.out.println(kor);



		//변수명 명명법
		//1. 영문자, 숫자, _(언더바) 사용
		//2. 숫자 시작 x
		//3. 예약어 사용 불가
		//4. 의미있게(*******)
		byte eng;
		byte MATH;
		byte name1;
		byte student_kor;
		// byte test+-; (특문 사용불가)
		byte 국어; // 유니코드라 인식 가능
		국어 = 80;
		System.out.println(국어);
		
		// byte 100kor;
		byte _100kor;
	 
	 //자료형, 식별자
		//byte class;
		//byte byte;

		byte a;
		byte b;
		byte c;
		
		// variable kor, eng are already defined in method main
		byte kor1;
		byte math;
		byte eng1;

		byte korScore;
		byte mathScore;

		//약어 x
		byte sn;
		
		//변수 선언
		
		int n1; //변수 선언
		n1 = 100; //변수 초기화

		int n2 = 200; //변수 선언 + 초기화

		int n3;
		int n4;

		int n5,n6,n7;

		int n9 = 10, n10 = 20, n11 = 30, n12, n13 = 30;

		int n14,n15 = 30;


// class Ex05_Variable { = K&R 스타일(브라이언 커니핸 & 데니스 리치)

class Ex05_Variable
{ // Allman 스타일

	public static void main(String[] args) {
		//Ex05_Variable.java

		byte a;
		// 타입에 상관없이 모든 변수는 중복될수 없다.
		//byte a;
		//int a;
		//a = 10;

		//국어, 영어, 수학
		int kor, eng, math; // 국어, 영어, 수학

		// 1대1 대응 주석 달기가 더 보기 좋음
		int weight, // 몸무게
		height; // 키
		
		// 각자료형 변수 생성 + 데이터

		// 정수형
		// 1. byte

		//정수형 상수, 정수형 리터럴
		byte b1 = 10; //b1(변수), 10(데이터, 상수, Literal)
		// b1 = 128; < 오버플로우(overflow), Error
		// b1 = -129; < 언더플로우(underflow), Error

		//2. short
		short s1;
		s1 = 10;
		// s1 = 32768; // incompatible types: possible lossy conversation from int to short

		//3. int
		int n1 = 10;
		// n1 = 2200000000; // integer number too large: 2200000000
		//4. long
		long l1 = 10;
		l1 = 10000000000000000L; // interger number too large: 10000000000000000
		// Long 형 상수를 위해서는 상수(리터럴) 마지막에 L,l을 붙여주어야한다.

		// 모든 상수는 integer 타입 이다.

		// 대입 연산자
		// - 변수 = 값;
		// - LValue(변수) = RValue(변수, 상수);
		// - 반드시 LValue와 RValue의 자료형이 일치
		// 컴파일러에서 자동적으로 의역을 해준다 byte ~ short = 상수(int)

		int a1 = 10;
		int b;
		b = a1;

		// 실수형 
		float f1 = 3.14F;
		f1 = 1234567890123456789.12345678901234567890F;
		System.out.println(f1);

		// double = 좀 더 정교함, 기본 자료형
		double d1 = 2.58;
		d1 = 1234567890123456789.12345678901234567890;
		System.out.println(d1);

		// 논리형
		boolean flag = true;
		flag = false;
		System.out.println(flag);

		// 문자형
		char c1 = 'A';
		System.out.println(c1);

		c1 = '가';
		System.out.println(c1);

		//c1 = 'ABC'; > 글자 한개만 넣을수 있음(오류)
		//System.out.println(c1);

		c1 = '1'; // 숫자 1 이 아닌 문자로서의 '1' 임
		System.out.println(c1);

		// 기본형 x
		// 참조형 o

		// char : 문자 1 개
		// String : 문자 여러개

		// 홍길동
		
		String name = "홍길동"; // 문자 1 개 : ' ' , 문자 여러개 : " " 

		int num = 10;
		int Num = 20;
		int nuM = 30;
		int nUm = 40;

		// 자바에서..
		// 변수명 관례
		// 1. 단어를 소문자로 기재
		int NUM = 10; // 모두 대문자로 기재할경우 상수임
		int num1 = 10;

		// 학생 번호
		// Student Number
		int studentnumber; // 가독성 떨어짐, 첫 문자는 무조건 소문자로 시작해야함
		int studentNumber; // 캐멀 표기법
		int student_number; // 스네이크 표기법

		
		// 기수법(記數法)
		// 10진법, 2진법, 8진법, 16진법..

		int n2 = 10;   // 10 진수
		System.out.println(n2);

		int n3 = 010;  // 8 진수
		System.out.println(n3);

		int n4 = 0x10; // 16 진수
		System.out.println(n4);

		
-